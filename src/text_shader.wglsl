// chargrid shader
struct VertexInput{
    @location(0) position: vec3<f32>,
    @location(1) uv: vec2<f32>,
}
struct VertexOutput{
    @builtin(position) clip_position: vec4<f32>,
    @location(0) uv: vec2<f32>,
}
@vertex
fn vs_main(//@builtin(vertex_index)
     in_vertex: VertexInput) -> VertexOutput
    {
      
       var out: VertexOutput;

        out.uv=in_vertex.uv;
        out.clip_position=vec4<f32>(in_vertex.position,1.0);
        return out;
    }
@group(0) @binding(0)
var t_diffuse: texture_2d_array<f32>;
@group(0) @binding(1)
var s_diffuse: sampler;
@group(0) @binding(2)
var t_index: texture_2d<f32>;
@group(0) @binding(3)
var t_color_fg: texture_2d<f32>;
@group(0) @binding(4)
var t_color_bg: texture_2d<f32>;
@group(0) @binding(5)
var t_set: texture_2d<f32>;
@fragment
fn fs_main(in:VertexOutput) -> @location(0) vec4<f32>{
    let char_grid=$CHARGRID;
    let pos_grid=in.uv*char_grid;
    let k=pos_grid-floor(pos_grid);
    var sert_i=u32(textureSample(t_set,s_diffuse,in.uv).r*255.);
    let index=textureSample(t_index,s_diffuse,in.uv).x*255.;
    let col_fg=textureSample(t_color_fg,s_diffuse,in.uv);
    let col_bg=textureSample(t_color_bg,s_diffuse,in.uv);
    let y=floor(index/16.)/16.;
    let x=f32(u32(index)%16)/16.;

    let uv=k/16.+vec2<f32>(x,y);
    var col_char=textureSample(t_diffuse,s_diffuse,vec2<f32>(uv.x,uv.y),sert_i);
    var col=mix(col_bg,col_char*col_fg,col_char.a);
    col.a=col_char.a+col_bg.a;//max(col_char.a,col_bg.a);
    return col;

}
